1. keytool -genkey -noprompt -trustcacerts -keyalg RSA -alias org.nlh4j -keypass 01101981 -keystore .keystore.jks -storepass 01101981 -validity 3650

2. keytool -export -alias org.nlh4j -storepass 01101981 -file .keystore.cer -keystore .keystore.jks

3. keytool -import -v -trustcacerts -alias org.nlh4j -file .keystore.cer -keystore .keystore.cacerts.jks -keypass 01101981 -storepass 01101981

4. jarsigner.exe -verbose -keystore .keystore.cacerts.jks -storepass 01101981 -storetype JKS -keypass 01101981 target\nlh4j-utilities.jar org.nlh4j

5. Convert JKS to OpenSSL for nginx docker:
	- convert PKCS7 to PKCS12:
		keytool -importkeystore -srckeystore keystore.jks -destkeystore backup.pfx -deststoretype PKCS12
		Ex:
			keytool -importkeystore -srckeystore jdk8.org.nlh4j.keystore.jks -destkeystore jdk8.org.nlh4j.keystore.pfx -deststoretype PKCS12
			keytool -importkeystore -srckeystore jdk11.org.nlh4j.keystore.jks -destkeystore jdk11.org.nlh4j.keystore.pfx -deststoretype PKCS12
			keytool -importkeystore -srckeystore jdk17.org.nlh4j.keystore.jks -destkeystore jdk17.org.nlh4j.keystore.pfx -deststoretype PKCS12
	- export private key and certificate from above PFX:
		openssl pkcs12 -in backup.pfx -nocerts -out key.pem
		(note: need to input password for backup.pfx and private key PEM)
		Ex:
			openssl pkcs12 -in jdk8.org.nlh4j.keystore.pfx -nocerts -out jdk8.org.nlh4j.keystore.pem
			openssl pkcs12 -in jdk11.org.nlh4j.keystore.pfx -nocerts -out jdk11.org.nlh4j.keystore.pem
			openssl pkcs12 -in jdk17.org.nlh4j.keystore.pfx -nocerts -out jdk17.org.nlh4j.keystore.pem
	- remove password of private key PEM. If not, we must input password every time re-starting nginx/apache:
		openssl rsa -in key.pem -out private.key
		Ex:
			openssl rsa -in jdk8.org.nlh4j.keystore.pem -out jdk8.org.nlh4j.keystore.key
			openssl rsa -in jdk11.org.nlh4j.keystore.pem -out jdk11.org.nlh4j.keystore.key
			openssl rsa -in jdk17.org.nlh4j.keystore.pem -out jdk17.org.nlh4j.keystore.key
	- export certificate:
		openssl pkcs12 -in backup.pfx -clcerts -nokeys -out certificate.crt
		Ex:
			openssl pkcs12 -in jdk8.org.nlh4j.keystore.pfx -clcerts -nokeys -out jdk8.org.nlh4j.keystore.crt
			openssl pkcs12 -in jdk11.org.nlh4j.keystore.pfx -clcerts -nokeys -out jdk11.org.nlh4j.keystore.crt
			openssl pkcs12 -in jdk17.org.nlh4j.keystore.pfx -clcerts -nokeys -out jdk17.org.nlh4j.keystore.crt
	- export intermediate CAs:
		openssl pkcs12 -in C:\backup.pfx -out C:\cabundle.crt -nodes -nokeys -cacerts
		Ex:
			openssl pkcs12 -in jdk8.org.nlh4j.keystore.pfx -out jdk8.org.nlh4j.keystore.cabundle.crt -nodes -nokeys -cacerts
			openssl pkcs12 -in jdk11.org.nlh4j.keystore.pfx -out jdk11.org.nlh4j.keystore.cabundle.crt -nodes -nokeys -cacerts
			openssl pkcs12 -in jdk17.org.nlh4j.keystore.pfx -out jdk17.org.nlh4j.keystore.cabundle.crt -nodes -nokeys -cacerts
	- for nginx, need to merge 2 files: certificate.crt and cabundle.crt to newcertificate.crt like this:
		-----BEGIN CERTIFICATE-----
		certificate.crt content
		-----END CERTIFICATE-----
		-----BEGIN CERTIFICATE-----
		cabundle.crt content
		-----END CERTIFICATE-----
	Enjoy to use newcertificate.crt