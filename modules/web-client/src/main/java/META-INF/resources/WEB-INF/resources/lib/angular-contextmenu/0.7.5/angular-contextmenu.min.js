angular.module('ui.bootstrap.contextMenu',[]).directive('contextMenu',["$parse","$q","$window","$timeout",function($parse,$q,$window,$timeout){var contextMenus=[];var removeContextMenus=function(level){while(contextMenus.length&&(!level||contextMenus.length>level)){contextMenus.pop().remove()}
if(contextMenus.length==0&&$currentContextMenu){$currentContextMenu.remove()}};var $currentContextMenu=null;var body=document.body;var docEl=document.documentElement;var posX=function(event){var body=document.body;var docEl=document.documentElement;var posx=0;if(!event)event=window.event;if(event.pageX){posx=event.pageX}else if(event.clientX){posx=event.clientX+body.scrollLeft+docEl.scrollLeft}else if(event.originalEvent&&event.originalEvent.touches&&event.originalEvent.touches.length){var touch=event.originalEvent.touches[0];if(touch.pageX){posx=touch.pageX}else if(touch.clientX){posx=touch.clientX+body.scrollLeft+docEl.scrollLeft}}
return posx};var posY=function(event){var body=document.body;var docEl=document.documentElement;var posy=0;if(!event)event=window.event;if(event.pageY){posy=event.pageY}else if(event.clientY){posy=event.clientY+body.scrollTop+docEl.scrollTop}else if(event.originalEvent&&event.originalEvent.touches&&event.originalEvent.touches.length){var touch=event.originalEvent.touches[0];if(touch.pageY){posy=touch.pageY}else if(touch.clientY){posy=touch.clientY+body.scrollTop+docEl.scrollTop}}
return posy};var renderContextMenu=function($scope,event,options,model,level){if(!level){level=0}
if(!$){var $=angular.element}
$(event.currentTarget).addClass('context');var $contextMenu=$('<div>');if($currentContextMenu){$contextMenu=$currentContextMenu}
else{$currentContextMenu=$contextMenu}
$contextMenu.addClass('dropdown clearfix');var $ul=$('<ul>');$ul.addClass('context-menu');$ul.addClass('dropdown-menu');$ul.attr({'role':'menu'});$ul.css({display:'block',position:'absolute',left:posX(event)+'px',top:posY(event)+'px',"z-index":10000});var $promises=[];var mnuCnt=0;angular.forEach(options,function(item,i){var $li=$('<li>');var visibled=!0;if(item===null){$li.addClass('divider')}
else{var nestedMenu=angular.isArray(item[1])?item[1]:angular.isArray(item[2])?item[2]:angular.isArray(item[3])?item[3]:angular.isArray(item[4])?item[4]:angular.isArray(item[5])?item[5]:null;var $a=$('<a>');$a.css("padding-right","8px");$a.attr({tabindex:'-1',href:'#'});var text=typeof item[0]=='string'?item[0]:item[0].call($scope,$scope,event,model);var cssClass=typeof item[4]=='string'?item[3]:angular.isFunction(item[3])?item[3].call($scope,$scope,event,model):null;$promise=$q.when(text)
$promises.push($promise);$promise.then(function(text){$a.text(text);if(nestedMenu){$a.css("cursor","default");$a.append($('<strong style="font-family:monospace;font-weight:bold;float:right;">&gt;</strong>'))}});$li.addClass('menu-item');if(cssClass&&cssClass.length>0)$a.addClass(cssClass);$li.append($a);visibled=angular.isFunction(item[4])?item[4].call($scope,$scope,event,model,text):visibled;var enabled=angular.isFunction(item[2])?item[2].call($scope,$scope,event,model,text):!0;if(enabled){var openNestedMenu=function($event){removeContextMenus(level+1);var ev={pageX:posX(event)+$ul[0].offsetWidth-1,pageY:$ul[0].offsetTop+$li[0].offsetTop-3};renderContextMenu($scope,ev,nestedMenu,model,level+1)}
$li.on('click',function($event){$event.preventDefault();$scope.$apply(function(){if(nestedMenu){openNestedMenu($event)}
else{$(event.currentTarget).removeClass('context');removeContextMenus();item[1].call($scope,$scope,event,model,text)}})});$li.on('mouseover',function($event){$scope.$apply(function(){if(nestedMenu){openNestedMenu($event)}})})}
else{$li.on('click',function($event){$event.preventDefault()});$li.addClass('disabled')}}
if(visibled){$ul.append($li);mnuCnt++}});$contextMenu.append($ul);var height=Math.max(body.scrollHeight,docEl.scrollHeight,body.offsetHeight,docEl.offsetHeight,body.clientHeight,docEl.clientHeight);$contextMenu.css({width:'100%',height:height+'px',position:'absolute',top:0,left:0,zIndex:9999});if(mnuCnt>0)angular.element(body).append($contextMenu);$q.all($promises).then(function(){if(level===0){var topCoordinate=posY(event);var menuHeight=angular.element($ul[0]).prop('offsetHeight');var winHeight=event.view.innerHeight;if(topCoordinate>menuHeight&&winHeight-topCoordinate<menuHeight){topCoordinate=posY(event)-menuHeight}
var leftCoordinate=posX(event);var menuWidth=angular.element($ul[0]).prop('offsetWidth');var winWidth=event.view.innerWidth;if(leftCoordinate>menuWidth&&winWidth-leftCoordinate<menuWidth){leftCoordinate=posX(event)-menuWidth}
$ul.css({display:'block',position:'absolute',left:leftCoordinate+'px',top:topCoordinate+'px'})}});$contextMenu.on("mousedown",function(e){if($(e.target).hasClass('dropdown')){$(event.currentTarget).removeClass('context');removeContextMenus()}}).on('contextmenu',function(event){$(event.currentTarget).removeClass('context');event.preventDefault();removeContextMenus(level)});var resizeFn=function(){removeContextMenus()};angular.element($window).on('resize',resizeFn);$scope.$on("$destroy",function(){angular.element($window).off('resize',resizeFn);removeContextMenus()});contextMenus.push($ul)};function renderMenu(event,$scope,attrs){event.stopPropagation();$scope.$apply(function(){event.preventDefault();var options=$scope.$eval(attrs.contextMenu);var model=$scope.$eval(attrs.model);if(options instanceof Array){if(options.length===0){return}
renderContextMenu($scope,event,options,model)}
else{throw '"'+attrs.contextMenu+'" not an array'}})};return function($scope,element,attrs){element.on('contextmenu',function(event){renderMenu(event,$scope,attrs)})}}])