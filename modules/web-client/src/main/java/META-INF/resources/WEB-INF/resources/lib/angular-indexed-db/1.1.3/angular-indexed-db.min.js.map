{"version":3,"sources":["angular-indexed-db.js"],"names":["__slice","slice","angular","module","provider","IDBKeyRange","allTransactions","apiDirection","appendResultsToPromise","applyNeededUpgrades","cursorDirection","db","dbMode","dbName","dbPromise","dbVersion","defaultQueryOptions","errorMessageFor","indexedDB","readyState","upgradesByVersion","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","shimIndexedDB","mozIDBKeyRange","webkitIDBKeyRange","msIDBKeyRange","readonly","readwrite","pending","next","nextunique","prev","prevunique","ascending","descending","useIndex","keyRange","direction","oldVersion","event","tx","$log","version","hasOwnProperty","log","e","target","webkitErrorMessage","error","message","name","errorCode","promise","results","then","this","connection","databaseName","upgradeDatabase","newVersion","callback","Math","max","apply","Object","keys","$get","$q","$rootScope","DbQ","ObjectStore","Query","Transaction","addTransaction","closeDatabase","createDatabaseConnection","keyRangeForOptions","openDatabase","openTransaction","rejectWithError","validateStoreNames","deferred","$apply","reject","dbReq","defer","open","parseInt","onsuccess","result","resolve","onblocked","onerror","onupgradeneeded","oldVer","pow","transaction","close","storeNames","found","storeName","_i","_len","length","objectStoreNames","contains","mode","options","beginKey","endKey","bound","push","index","indexOf","splice","setupCallbacks","prototype","oncomplete","_this","onabort","title","objectStore","abort","q","args","arguments","call","_ref","rejectWith","req","notify","dbErrorFunction","resolveWith","store","_mapCursor","mapFunc","openCursor","cursor","_arrayOperation","data","item","isArray","when","getAllKeys","key","clear","upsert","put","insert","add","getAll","value","eachWhere","query","indexName","findWhere","each","eachBy","count","find","get","findBy","$lt","upperBound","$gt","lowerBound","$lte","$gte","$eq","only","$between","low","hi","exLow","exHi","$desc","unique","$asc","$index","openStore","callBack","openStores","objectStores","_results","openAllStores","Array","deleteDatabase","queryDirection","flush","all","databaseInfo","stores","keyPath","autoIncrement","indices","indexNames"],"mappings":"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","file":"angular-indexed-db.min.js","sourcesContent":["\n/**\n @license $indexedDBProvider\n (c) 2014 Bram Whillock (bramski)\n Forked from original work by clements Capitan (webcss)\n License: MIT\n */\n\n(function() {\n  'use strict';\n  var __slice = [].slice;\n\n  angular.module('indexedDB', []).provider('$indexedDB', function() {\n    var IDBKeyRange, allTransactions, apiDirection, appendResultsToPromise, applyNeededUpgrades, cursorDirection, db, dbMode, dbName, dbPromise, dbVersion, defaultQueryOptions, errorMessageFor, indexedDB, readyState, upgradesByVersion;\n    indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB || window.shimIndexedDB;\n    IDBKeyRange = window.IDBKeyRange || window.mozIDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;\n    dbMode = {\n      readonly: \"readonly\",\n      readwrite: \"readwrite\"\n    };\n    readyState = {\n      pending: \"pending\"\n    };\n    cursorDirection = {\n      next: \"next\",\n      nextunique: \"nextunique\",\n      prev: \"prev\",\n      prevunique: \"prevunique\"\n    };\n    apiDirection = {\n      ascending: cursorDirection.next,\n      descending: cursorDirection.prev\n    };\n    dbName = '';\n    dbVersion = 1;\n    db = null;\n    upgradesByVersion = {};\n    dbPromise = null;\n    allTransactions = [];\n    defaultQueryOptions = {\n      useIndex: void 0,\n      keyRange: null,\n      direction: cursorDirection.next\n    };\n    applyNeededUpgrades = function(oldVersion, event, db, tx, $log) {\n      var version;\n      for (version in upgradesByVersion) {\n        if (!upgradesByVersion.hasOwnProperty(version) || version <= oldVersion) {\n          continue;\n        }\n        $log.log(\"$indexedDB: Running upgrade : \" + version + \" from \" + oldVersion);\n        upgradesByVersion[version](event, db, tx);\n      }\n    };\n    errorMessageFor = function(e) {\n      if (e.target.readyState === readyState.pending) {\n        return \"Error: Operation pending\";\n      } else {\n        return e.target.webkitErrorMessage || e.target.error.message || e.target.error.name || e.target.errorCode;\n      }\n    };\n    appendResultsToPromise = function(promise, results) {\n      if (results !== void 0) {\n        return promise.then(function() {\n          return results;\n        });\n      } else {\n        return promise;\n      }\n    };\n\n    /**\n    @ngdoc function\n    @name $indexedDBProvider.connection\n    @function\n    \n    @description\n    sets the name of the database to use\n    \n    @param {string} databaseName database name.\n    @returns {object} this\n     */\n    this.connection = function(databaseName) {\n      dbName = databaseName;\n      return this;\n    };\n\n    /**\n    @ngdoc function\n    @name $indexedDBProvider.upgradeDatabase\n    @function\n    \n    @description provides version number and steps to upgrade the database wrapped in a\n    callback function\n    \n    @param {number} newVersion new version number for the database.\n    @param {function} callback the callback which proceeds the upgrade\n    @returns {object} this\n     */\n    this.upgradeDatabase = function(newVersion, callback) {\n      upgradesByVersion[newVersion] = callback;\n      dbVersion = Math.max.apply(null, Object.keys(upgradesByVersion));\n      return this;\n    };\n    this.$get = [\n      '$q', '$rootScope', '$log', function($q, $rootScope, $log) {\n        var DbQ, ObjectStore, Query, Transaction, addTransaction, closeDatabase, createDatabaseConnection, keyRangeForOptions, openDatabase, openTransaction, rejectWithError, validateStoreNames;\n        rejectWithError = function(deferred) {\n          return function(error) {\n            return $rootScope.$apply(function() {\n              return deferred.reject(errorMessageFor(error));\n            });\n          };\n        };\n        createDatabaseConnection = function() {\n          var dbReq, deferred;\n          deferred = $q.defer();\n          dbReq = indexedDB.open(dbName, parseInt(dbVersion) || 1);\n          dbReq.onsuccess = function() {\n            db = dbReq.result;\n            $rootScope.$apply(function() {\n              deferred.resolve(db);\n            });\n          };\n          dbReq.onblocked = dbReq.onerror = rejectWithError(deferred);\n          dbReq.onupgradeneeded = function(event) {\n            var oldVer, tx;\n            oldVer = event.oldVersion;\n            if (oldVer > Math.pow(2, 62)) {\n              oldVer = 0;\n            }\n            db = event.target.result;\n            tx = event.target.transaction;\n            $log.log(\"$indexedDB: Upgrading database '\" + db.name + \"' from version \" + oldVer + \" to version \" + event.newVersion + \" ...\");\n            applyNeededUpgrades(oldVer, event, db, tx, $log);\n          };\n          return deferred.promise;\n        };\n        openDatabase = function() {\n          return dbPromise || (dbPromise = createDatabaseConnection());\n        };\n        closeDatabase = function() {\n          return openDatabase().then(function() {\n            db.close();\n            db = null;\n            return dbPromise = null;\n          });\n        };\n        validateStoreNames = function(storeNames) {\n          var found, storeName, _i, _len;\n          found = true;\n          for (_i = 0, _len = storeNames.length; _i < _len; _i++) {\n            storeName = storeNames[_i];\n            found = found & db.objectStoreNames.contains(storeName);\n          }\n          return found;\n        };\n        openTransaction = function(storeNames, mode) {\n          if (mode == null) {\n            mode = dbMode.readonly;\n          }\n          return openDatabase().then(function() {\n            if (!validateStoreNames(storeNames)) {\n              return $q.reject(\"Object stores \" + storeNames + \" do not exist.\");\n            }\n            return new Transaction(storeNames, mode);\n          });\n        };\n        keyRangeForOptions = function(options) {\n          if (options.beginKey && options.endKey) {\n            return IDBKeyRange.bound(options.beginKey, options.endKey);\n          }\n        };\n        addTransaction = function(transaction) {\n          allTransactions.push(transaction.promise);\n          return transaction.promise[\"finally\"](function() {\n            var index;\n            index = allTransactions.indexOf(transaction.promise);\n            if (index > -1) {\n              return allTransactions.splice(index, 1);\n            }\n          });\n        };\n        Transaction = (function() {\n          function Transaction(storeNames, mode) {\n            if (mode == null) {\n              mode = dbMode.readonly;\n            }\n            this.transaction = db.transaction(storeNames, mode);\n            this.defer = $q.defer();\n            this.promise = this.defer.promise;\n            this.setupCallbacks();\n          }\n\n          Transaction.prototype.setupCallbacks = function() {\n            this.transaction.oncomplete = (function(_this) {\n              return function() {\n                return $rootScope.$apply(function() {\n                  return _this.defer.resolve(\"Transaction Completed\");\n                });\n              };\n            })(this);\n            this.transaction.onabort = (function(_this) {\n              return function(error) {\n                return $rootScope.$apply(function() {\n                  return _this.defer.reject({\n                    title: \"Transaction Aborted\",\n                    error: error\n                  });\n                });\n              };\n            })(this);\n            this.transaction.onerror = (function(_this) {\n              return function(error) {\n                return $rootScope.$apply(function() {\n                  return _this.defer.reject({\n                    title: \"Transaction Error\",\n                    error: error\n                  });\n                });\n              };\n            })(this);\n            return addTransaction(this);\n          };\n\n          Transaction.prototype.objectStore = function(storeName) {\n            return this.transaction.objectStore(storeName);\n          };\n\n          Transaction.prototype.abort = function() {\n            return this.transaction.abort();\n          };\n\n          return Transaction;\n\n        })();\n        DbQ = (function() {\n          function DbQ() {\n            this.q = $q.defer();\n            this.promise = this.q.promise;\n          }\n\n          DbQ.prototype.reject = function() {\n            var args;\n            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n            return $rootScope.$apply((function(_this) {\n              return function() {\n                var _ref;\n                return (_ref = _this.q).reject.apply(_ref, args);\n              };\n            })(this));\n          };\n\n          DbQ.prototype.rejectWith = function(req) {\n            return req.onerror = req.onblocked = (function(_this) {\n              return function(e) {\n                return _this.reject(errorMessageFor(e));\n              };\n            })(this);\n          };\n\n          DbQ.prototype.resolve = function() {\n            var args;\n            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n            return $rootScope.$apply((function(_this) {\n              return function() {\n                var _ref;\n                return (_ref = _this.q).resolve.apply(_ref, args);\n              };\n            })(this));\n          };\n\n          DbQ.prototype.notify = function() {\n            var args;\n            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n            return $rootScope.$apply((function(_this) {\n              return function() {\n                var _ref;\n                return (_ref = _this.q).notify.apply(_ref, args);\n              };\n            })(this));\n          };\n\n          DbQ.prototype.dbErrorFunction = function() {\n            return (function(_this) {\n              return function(error) {\n                return $rootScope.$apply(function() {\n                  return _this.q.reject(errorMessageFor(error));\n                });\n              };\n            })(this);\n          };\n\n          DbQ.prototype.resolveWith = function(req) {\n            this.rejectWith(req);\n            return req.onsuccess = (function(_this) {\n              return function(e) {\n                return _this.resolve(e.target.result);\n              };\n            })(this);\n          };\n\n          return DbQ;\n\n        })();\n        ObjectStore = (function() {\n          function ObjectStore(storeName, transaction) {\n            this.storeName = storeName;\n            this.store = transaction.objectStore(storeName);\n            this.transaction = transaction;\n          }\n\n          ObjectStore.prototype.defer = function() {\n            return new DbQ();\n          };\n\n          ObjectStore.prototype._mapCursor = function(defer, mapFunc, req) {\n            var results;\n            if (req == null) {\n              req = this.store.openCursor();\n            }\n            results = [];\n            defer.rejectWith(req);\n            return req.onsuccess = function(e) {\n              var cursor;\n              if (cursor = e.target.result) {\n                results.push(mapFunc(cursor));\n                defer.notify(mapFunc(cursor));\n                return cursor[\"continue\"]();\n              } else {\n                return defer.resolve(results);\n              }\n            };\n          };\n\n          ObjectStore.prototype._arrayOperation = function(data, mapFunc) {\n            var defer, item, req, results, _i, _len;\n            defer = this.defer();\n            if (!angular.isArray(data)) {\n              data = [data];\n            }\n            for (_i = 0, _len = data.length; _i < _len; _i++) {\n              item = data[_i];\n              req = mapFunc(item);\n              results = [];\n              defer.rejectWith(req);\n              req.onsuccess = function(e) {\n                results.push(e.target.result);\n                defer.notify(e.target.result);\n                if (results.length >= data.length) {\n                  return defer.resolve(results);\n                }\n              };\n            }\n            if (data.length === 0) {\n              return $q.when([]);\n            }\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.getAllKeys\n            @function\n          \n            @description\n            gets all the keys\n          \n            @returns {Q} A promise which will result with all the keys\n           */\n\n          ObjectStore.prototype.getAllKeys = function() {\n            var defer, req;\n            defer = this.defer();\n            if (this.store.getAllKeys) {\n              req = this.store.getAllKeys();\n              defer.resolveWith(req);\n            } else {\n              this._mapCursor(defer, function(cursor) {\n                return cursor.key;\n              });\n            }\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.clear\n            @function\n          \n            @description\n            clears all objects from this store\n          \n            @returns {Q} A promise that this can be done successfully.\n           */\n\n          ObjectStore.prototype.clear = function() {\n            var defer, req;\n            defer = this.defer();\n            req = this.store.clear();\n            defer.resolveWith(req);\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.delete\n            @function\n          \n            @description\n            Deletes the item at the key.  The operation is ignored if the item does not exist.\n          \n            @param {key} The key of the object to delete.\n            @returns {Q} A promise that this can be done successfully.\n           */\n\n          ObjectStore.prototype[\"delete\"] = function(key) {\n            var defer;\n            defer = this.defer();\n            defer.resolveWith(this.store[\"delete\"](key));\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.upsert\n            @function\n          \n            @description\n            Updates the given item\n          \n            @param {data} Details of the item or items to update or insert\n            @returns {Q} A promise that this can be done successfully.\n           */\n\n          ObjectStore.prototype.upsert = function(data) {\n            return this._arrayOperation(data, (function(_this) {\n              return function(item) {\n                return _this.store.put(item);\n              };\n            })(this));\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.insert\n            @function\n          \n            @description\n            Updates the given item\n          \n            @param {data} Details of the item or items to insert\n            @returns {Q} A promise that this can be done successfully.\n           */\n\n          ObjectStore.prototype.insert = function(data) {\n            return this._arrayOperation(data, (function(_this) {\n              return function(item) {\n                return _this.store.add(item);\n              };\n            })(this));\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.getAll\n            @function\n          \n            @description\n            Fetches all items from the store\n          \n            @returns {Q} A promise which resolves with copies of all items in the store\n           */\n\n          ObjectStore.prototype.getAll = function() {\n            var defer;\n            defer = this.defer();\n            if (this.store.getAll) {\n              defer.resolveWith(this.store.getAll());\n            } else {\n              this._mapCursor(defer, function(cursor) {\n                return cursor.value;\n              });\n            }\n            return defer.promise;\n          };\n\n          ObjectStore.prototype.eachWhere = function(query) {\n            var defer, direction, indexName, keyRange, req;\n            defer = this.defer();\n            indexName = query.indexName;\n            keyRange = query.keyRange;\n            direction = query.direction;\n            req = indexName ? this.store.index(indexName).openCursor(keyRange, direction) : this.store.openCursor(keyRange, direction);\n            this._mapCursor(defer, (function(cursor) {\n              return cursor.value;\n            }), req);\n            return defer.promise;\n          };\n\n          ObjectStore.prototype.findWhere = function(query) {\n            return this.eachWhere(query);\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.each\n            @function\n          \n            @description\n            Iterates through the items in the store\n          \n            @param {options.beginKey} the key to start iterating from\n            @param {options.endKey} the key to stop iterating at\n            @param {options.direction} Direction to iterate in\n            @returns {Q} A promise which notifies with each individual item and resolves with all of them.\n           */\n\n          ObjectStore.prototype.each = function(options) {\n            if (options == null) {\n              options = {};\n            }\n            return this.eachBy(void 0, options);\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.eachBy\n            @function\n          \n            @description\n            Iterates through the items in the store using an index\n          \n            @param {indexName} name of the index to use instead of the primary\n            @param {options.beginKey} the key to start iterating from\n            @param {options.endKey} the key to stop iterating at\n            @param {options.direction} Direction to iterate in\n            @returns {Q} A promise which notifies with each individual item and resolves with all of them.\n           */\n\n          ObjectStore.prototype.eachBy = function(indexName, options) {\n            var q;\n            if (indexName == null) {\n              indexName = void 0;\n            }\n            if (options == null) {\n              options = {};\n            }\n            q = new Query();\n            q.indexName = indexName;\n            q.keyRange = keyRangeForOptions(options);\n            q.direction = options.direction || defaultQueryOptions.direction;\n            return this.eachWhere(q);\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.count\n            @function\n          \n            @description\n            Returns a count of the items in the store\n          \n            @returns {Q} A promise which resolves with the count of all the items in the store.\n           */\n\n          ObjectStore.prototype.count = function() {\n            var defer;\n            defer = this.defer();\n            defer.resolveWith(this.store.count());\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.find\n            @function\n          \n            @description\n            Fetches an item from the store\n          \n            @returns {Q} A promise which resolves with the item from the store\n           */\n\n          ObjectStore.prototype.find = function(key) {\n            var defer, req;\n            defer = this.defer();\n            req = this.store.get(key);\n            defer.rejectWith(req);\n            req.onsuccess = (function(_this) {\n              return function(e) {\n                if (e.target.result) {\n                  return defer.resolve(e.target.result);\n                } else {\n                  return defer.reject(\"\" + _this.storeName + \":\" + key + \" not found.\");\n                }\n              };\n            })(this);\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.findBy\n            @function\n          \n            @description\n            Fetches an item from the store using a named index.\n          \n            @returns {Q} A promise which resolves with the item from the store.\n           */\n\n          ObjectStore.prototype.findBy = function(index, key) {\n            var defer;\n            defer = this.defer();\n            defer.resolveWith(this.store.index(index).get(key));\n            return defer.promise;\n          };\n\n          ObjectStore.prototype.query = function() {\n            return new Query();\n          };\n\n          return ObjectStore;\n\n        })();\n        Query = (function() {\n          function Query() {\n            this.indexName = void 0;\n            this.keyRange = void 0;\n            this.direction = cursorDirection.next;\n          }\n\n          Query.prototype.$lt = function(value) {\n            this.keyRange = IDBKeyRange.upperBound(value, true);\n            return this;\n          };\n\n          Query.prototype.$gt = function(value) {\n            this.keyRange = IDBKeyRange.lowerBound(value, true);\n            return this;\n          };\n\n          Query.prototype.$lte = function(value) {\n            this.keyRange = IDBKeyRange.upperBound(value);\n            return this;\n          };\n\n          Query.prototype.$gte = function(value) {\n            this.keyRange = IDBKeyRange.lowerBound(value);\n            return this;\n          };\n\n          Query.prototype.$eq = function(value) {\n            this.keyRange = IDBKeyRange.only(value);\n            return this;\n          };\n\n          Query.prototype.$between = function(low, hi, exLow, exHi) {\n            if (exLow == null) {\n              exLow = false;\n            }\n            if (exHi == null) {\n              exHi = false;\n            }\n            this.keyRange = IDBKeyRange.bound(low, hi, exLow, exHi);\n            return this;\n          };\n\n          Query.prototype.$desc = function(unique) {\n            this.direction = unique ? cursorDirection.prevunique : cursorDirection.prev;\n            return this;\n          };\n\n          Query.prototype.$asc = function(unique) {\n            this.direction = unique ? cursorDirection.nextunique : cursorDirection.next;\n            return this;\n          };\n\n          Query.prototype.$index = function(indexName) {\n            this.indexName = indexName;\n            return this;\n          };\n\n          return Query;\n\n        })();\n        return {\n\n          /**\n          @ngdoc method\n          @name $indexedDB.objectStore\n          @function\n          \n          @description an IDBObjectStore to use\n          \n          @params {string} storeName the name of the objectstore to use\n          @returns {object} ObjectStore\n           */\n          openStore: function(storeName, callBack, mode) {\n            if (mode == null) {\n              mode = dbMode.readwrite;\n            }\n            return openTransaction([storeName], mode).then(function(transaction) {\n              var results;\n              results = callBack(new ObjectStore(storeName, transaction));\n              return appendResultsToPromise(transaction.promise, results);\n            });\n          },\n          openStores: function(storeNames, callback, mode) {\n            if (mode == null) {\n              mode = dbMode.readwrite;\n            }\n            return openTransaction(storeNames, mode).then(function(transaction) {\n              var objectStores, results, storeName;\n              objectStores = (function() {\n                var _i, _len, _results;\n                _results = [];\n                for (_i = 0, _len = storeNames.length; _i < _len; _i++) {\n                  storeName = storeNames[_i];\n                  _results.push(new ObjectStore(storeName, transaction));\n                }\n                return _results;\n              })();\n              results = callback.apply(null, objectStores);\n              return appendResultsToPromise(transaction.promise, results);\n            });\n          },\n          openAllStores: function(callback, mode) {\n            if (mode == null) {\n              mode = dbMode.readwrite;\n            }\n            return openDatabase().then((function(_this) {\n              return function() {\n                var objectStores, results, storeName, storeNames, transaction;\n                storeNames = Array.prototype.slice.apply(db.objectStoreNames);\n                transaction = new Transaction(storeNames, mode);\n                objectStores = (function() {\n                  var _i, _len, _results;\n                  _results = [];\n                  for (_i = 0, _len = storeNames.length; _i < _len; _i++) {\n                    storeName = storeNames[_i];\n                    _results.push(new ObjectStore(storeName, transaction));\n                  }\n                  return _results;\n                })();\n                results = callback.apply(null, objectStores);\n                return appendResultsToPromise(transaction.promise, results);\n              };\n            })(this));\n          },\n\n          /**\n            @ngdoc method\n            @name $indexedDB.closeDatabase\n            @function\n          \n            @description Closes the database for use and completes all transactions.\n           */\n          closeDatabase: function() {\n            return closeDatabase();\n          },\n\n          /**\n            @ngdoc method\n            @name $indexedDB.deleteDatabase\n            @function\n          \n            @description Closes and then destroys the current database.  Returns a promise that resolves when this is persisted.\n           */\n          deleteDatabase: function() {\n            return closeDatabase().then(function() {\n              var defer;\n              defer = new DbQ();\n              defer.resolveWith(indexedDB.deleteDatabase(dbName));\n              return defer.promise;\n            })[\"finally\"](function() {\n              return $log.log(\"$indexedDB: \" + dbName + \" database deleted.\");\n            });\n          },\n          queryDirection: apiDirection,\n          flush: function() {\n            if (allTransactions.length > 0) {\n              return $q.all(allTransactions);\n            } else {\n              return $q.when([]);\n            }\n          },\n\n          /**\n            @ngdoc method\n            @name $indexedDB.databaseInfo\n            @function\n          \n            @description Returns information about this database.\n           */\n          databaseInfo: function() {\n            return openDatabase().then(function() {\n              var storeNames, transaction;\n              transaction = null;\n              storeNames = Array.prototype.slice.apply(db.objectStoreNames);\n              return openTransaction(storeNames, dbMode.readonly).then(function(transaction) {\n                var store, storeName, stores;\n                stores = (function() {\n                  var _i, _len, _results;\n                  _results = [];\n                  for (_i = 0, _len = storeNames.length; _i < _len; _i++) {\n                    storeName = storeNames[_i];\n                    store = transaction.objectStore(storeName);\n                    _results.push({\n                      name: storeName,\n                      keyPath: store.keyPath,\n                      autoIncrement: store.autoIncrement,\n                      indices: Array.prototype.slice.apply(store.indexNames)\n                    });\n                  }\n                  return _results;\n                })();\n                return transaction.promise.then(function() {\n                  return {\n                    name: db.name,\n                    version: db.version,\n                    objectStores: stores\n                  };\n                });\n              });\n            });\n          }\n        };\n      }\n    ];\n  });\n\n}).call(this);\n\n//# sourceMappingURL=angular-indexed-db.js.map\n"]}