/*************************************************
 * Starting from the Gradle guide for Android results in the following initial build.gradle file:
 *
 * buildscript {
 *     repositories {
 *         mavenCentral()
 *     }
 *     dependencies {
 *         classpath 'com.android.tools.build:gradle:0.5.+'
 *     }
 * }
 * apply plugin: 'android'
 *
 * android {
 *     compileSdkVersion 18
 *     buildToolsVersion "18.1.0"
 *
 *     defaultConfig {
 *         minSdkVersion 16
 *         targetSdkVersion 16
 *     }
 * }
 *************************************************/
buildscript {
    repositories {
        /** using maven local repository */
	    mavenLocal()
	    /** using maven central repository */
	    mavenCentral()
	    /** java repository */
	    jcenter()
		maven { url "http://maven.seasar.org/maven2" }
		maven { url "https://repository.jboss.org/nexus/content/groups/developer/" }
		maven { url "http://maven.nuiton.org/nexus/content/repositories" }
		maven { url "http://projectlombok.org/mavenrepo" }
		maven { url "https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient" }
		maven { url "http://repo.maven.apache.org/maven2" }
    }
    dependencies {
    	classpath 'net.sf.proguard:proguard-base:5.3'
        classpath 'net.sf.proguard:proguard-gradle:5.3'
    }
}

/*************************************************
 * Gradle Plugins Configuration
 *************************************************/
apply plugin: 'java'

/** maven */
apply plugin: 'maven'
apply plugin: 'maven-publish'

// JAR signing
apply plugin: 'signing'

/*************************************************
 * Maven Configuration
 *************************************************/
group = groupId
version = version
description = description

// maven plugin
configurations {
    deployerJars
}
uploadArchives {
    repositories {
        mavenDeployer {
        	configuration = configurations.deployerJars
        	/** using maven local repository */
        	repository(url: mavenLocal().url)
        }
    }
}

// maven-publish plugin
publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            ext.repo = 'local'
        }
    }
    repositories {
        maven {
        	name 'local'
            /** using maven local repository */
        	url mavenLocal().url
        }
    }
}

/*************************************************
 * Java Configuration
 *************************************************/
sourceCompatibility = jdk
targetCompatibility = jdk
tasks.withType(JavaCompile) {
	options.fork = true
	options.incremental = true
	options.encoding = 'UTF-8'

	sourceSets {
	    main {
	        java {
	            srcDirs 'src/main/java'
	        }
	        resources {
	            srcDirs 'src/main/resources'
	            include '*.*'
	      		exclude '*.java'
	      		exclude '*.class'
	        }
	    }
	}
}

/*************************************************
 * Proguard Configuration
 *************************************************/
task proguard(type: proguard.gradle.ProGuardTask) {
	configuration 'proguard.cnf'

	injars { 'build/libs/' + artifactId + '-' + version + '.jar' }
	outjars { 'build/libs/' + artifactId + '-' + version + '-obf.jar' }

	libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
	libraryjars "${System.getProperty('java.home')}/lib/jce.jar"
	libraryjars "${System.getProperty('java.home')}/lib/ext/sunjce_provider.jar"
}
task obfuscate(dependsOn: tasks.withType(proguard.gradle.ProGuardTask)) << {}
install.dependsOn(obfuscate)
assemble.dependsOn(obfuscate)

/*************************************************
 * JAR Signing Configuration
 *************************************************/
signing {
    sign configurations.archives
}

/*************************************************
 * More Repository Configuration
 *************************************************/
repositories {
	/** using maven local repository */
    mavenLocal()
    /** using maven central repository */
    mavenCentral()
    /** java repository */
    jcenter()
	maven { url "http://maven.seasar.org/maven2" }
	maven { url "https://repository.jboss.org/nexus/content/groups/developer/" }
	maven { url "http://maven.nuiton.org/nexus/content/repositories" }
	maven { url "http://projectlombok.org/mavenrepo" }
	maven { url "https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient" }
	maven { url "http://repo.maven.apache.org/maven2" }
	/* See https://mvnrepository.com/artifact/com.googlecode/openbeans */
	maven { url "https://maven.repository.redhat.com/ga" }
}

/*************************************************
 * Dependencies Configuration
 *************************************************/
dependencies {
	/* Viber Bot */
	compile group: 'com.viber', name: 'viber-bot', version: '1.0.9'

	/* Lombok */
	compileOnly(group: 'org.projectlombok', name: 'lombok', version:'1.14.4') {
		/* This dependency was originally in the Maven provided scope, but the project was not of type war.
		This behavior is not yet supported by Gradle, so this dependency has been converted to a compile dependency.
		Please review and delete this closure when resolved. */
	}

	/* JUNIT Test */
	testCompile(group: 'junit', name: 'junit', version:'4.11') {
		/* This dependency was originally in the Maven provided scope, but the project was not of type war.
		This behavior is not yet supported by Gradle, so this dependency has been converted to a compile dependency.
		Please review and delete this closure when resolved. */
		exclude(module: 'hamcrest-core')
	}

	/* Others - support for JUNIT Test */
	testCompile(group: 'org.hamcrest', name: 'hamcrest-all', version:'1.3') {
		/* This dependency was originally in the Maven provided scope, but the project was not of type war.
		This behavior is not yet supported by Gradle, so this dependency has been converted to a compile dependency.
		Please review and delete this closure when resolved. */
	}
}
